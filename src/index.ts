import { app, BrowserWindow, ipcMain, Menu, shell } from 'electron';

import { isDev } from './common/nodejs/utils/isDev';

/**
 * connect handlers
 */
import '~common/events/connect';
import '~bridge/events/connect';

import { updateApp } from '~common/nodejs/actions/updateApp';
import { logger } from './common/nodejs/utils/logger';
import { START_UPDATING } from '~common/events/events';
import { renameOldConfigsFolder } from '~bridge/nodejs/configs/convertOldConfigs/renameOldConfigs';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
    // On certificate error we disable default behaviour (stop loading the page)
    // and we then say "it is all fine - true" to the callback
    event.preventDefault();
    callback(true);
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

renameOldConfigsFolder()

const createWindow = (): void => {
    logger.log(app.getVersion())
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        webPreferences: {
            nodeIntegration: false, // is default value after Electron v5
            contextIsolation: true, // protect against prototype pollution
            // enableRemoteModule: false,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    const onStartUpdate = () => {
        mainWindow.webContents.send(START_UPDATING)
    }

    mainWindow.maximize();

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    if(isDev()) {
        mainWindow.webContents.openDevTools();
    }

    const menu = Menu.buildFromTemplate([
        {
            label: 'Update!',
            submenu: [
                {
                    label: 'update',
                    click() {
                        updateApp(false, onStartUpdate)
                     }
                }
            ]
        },
        {
            label: 'View',
            submenu: [
              { role: 'reload' },
              { role: 'forceReload' },
              { role: 'toggleDevTools' },
              { type: 'separator' },
              { role: 'resetZoom' },
              { role: 'zoomIn' },
              { role: 'zoomOut' },
              { type: 'separator' },
              { role: 'togglefullscreen' }
            ]
          },
          {
            role: 'help',
            submenu: [
              {
                label: 'Learn More',
                click: async () => {
                  await shell.openExternal('https://www.nexusmods.com/skyrimspecialedition/mods/84913')
                }
              }
            ]
          }
    ])

    Menu.setApplicationMenu(menu)

    ipcMain.on('console-data', (...args: any[]) => {
        mainWindow.webContents.send('console-data', ...args);
    });

    mainWindow.on('closed',()=>{
        ipcMain.removeAllListeners('console-data');
    })

    // first check on load
    updateApp(true, onStartUpdate)
    // next check on next day if app wasn't closed earlier
    setInterval(() => {
        updateApp(true, onStartUpdate)
    }, 24 * 60 * 60 * 1000)
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});


